version: '3.8'

networks:
  transbandung-microservices:
    driver: bridge

volumes:
  user_db_data:
  ticketing_db_data:
  payment_db_data:
  inbox_db_data:
  reviews_db_data:
  redis_data:

services:
  # ========================================
  # DATABASE SERVICES
  # ========================================
  
  # User Management Database
  user-db:
    image: mysql:8.0
    container_name: transbandung-user-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: transbandung_users
      MYSQL_USER: microservice
      MYSQL_PASSWORD: microservice123
    volumes:
      - user_db_data:/var/lib/mysql
      - ./docker/mysql/init/01-user-db.sql:/docker-entrypoint-initdb.d/01-user-db.sql
    networks:
      - transbandung-microservices
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Ticketing Database
  ticketing-db:
    image: mysql:8.0
    container_name: transbandung-ticketing-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: transbandung_ticketing
      MYSQL_USER: microservice
      MYSQL_PASSWORD: microservice123
    volumes:
      - ticketing_db_data:/var/lib/mysql
      - ./docker/mysql/init/02-ticketing-db.sql:/docker-entrypoint-initdb.d/02-ticketing-db.sql
    networks:
      - transbandung-microservices
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Payment Database
  payment-db:
    image: mysql:8.0
    container_name: transbandung-payment-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: transbandung_payments
      MYSQL_USER: microservice
      MYSQL_PASSWORD: microservice123
    volumes:
      - payment_db_data:/var/lib/mysql
      - ./docker/mysql/init/03-payment-db.sql:/docker-entrypoint-initdb.d/03-payment-db.sql
    networks:
      - transbandung-microservices
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Inbox Database
  inbox-db:
    image: mysql:8.0
    container_name: transbandung-inbox-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: transbandung_inbox
      MYSQL_USER: microservice
      MYSQL_PASSWORD: microservice123
    volumes:
      - inbox_db_data:/var/lib/mysql
      - ./docker/mysql/init/04-inbox-db.sql:/docker-entrypoint-initdb.d/04-inbox-db.sql
    networks:
      - transbandung-microservices
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Reviews Database (for future use)
  reviews-db:
    image: mysql:8.0
    container_name: transbandung-reviews-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: transbandung_reviews
      MYSQL_USER: microservice
      MYSQL_PASSWORD: microservice123
    volumes:
      - reviews_db_data:/var/lib/mysql
      - ./docker/mysql/init/05-reviews-db.sql:/docker-entrypoint-initdb.d/05-reviews-db.sql
    networks:
      - transbandung-microservices
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: transbandung-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - transbandung-microservices
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # MICROSERVICES
  # ========================================

  # User Service
  user-service:
    build:
      context: .
      dockerfile: dockerfiles/user-service.Dockerfile
    container_name: transbandung-user-service
    restart: unless-stopped
    ports:
      - "8001:80"
    environment:
      - SERVICE_NAME=user-service
      - SERVICE_PORT=8001
    env_file:
      - ./envs/.env.user-service
    volumes:
      - ./storage/logs/user-service:/var/www/html/storage/logs
    depends_on:
      user-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - transbandung-microservices
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Ticketing Service
  ticketing-service:
    build:
      context: .
      dockerfile: dockerfiles/ticketing-service.Dockerfile
    container_name: transbandung-ticketing-service
    restart: unless-stopped
    ports:
      - "8002:80"
    environment:
      - SERVICE_NAME=ticketing-service
      - SERVICE_PORT=8002
    env_file:
      - ./envs/.env.ticketing-service
    volumes:
      - ./storage/logs/ticketing-service:/var/www/html/storage/logs
    depends_on:
      ticketing-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - transbandung-microservices
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: dockerfiles/payment-service.Dockerfile
    container_name: transbandung-payment-service
    restart: unless-stopped
    ports:
      - "8003:80"
    environment:
      - SERVICE_NAME=payment-service
      - SERVICE_PORT=8003
    env_file:
      - ./envs/.env.payment-service
    volumes:
      - ./storage/logs/payment-service:/var/www/html/storage/logs
    depends_on:
      payment-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      ticketing-service:
        condition: service_healthy
    networks:
      - transbandung-microservices
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Inbox Service
  inbox-service:
    build:
      context: .
      dockerfile: dockerfiles/inbox-service.Dockerfile
    container_name: transbandung-inbox-service
    restart: unless-stopped
    ports:
      - "8004:80"
    environment:
      - SERVICE_NAME=inbox-service
      - SERVICE_PORT=8004
    env_file:
      - ./envs/.env.inbox-service
    volumes:
      - ./storage/logs/inbox-service:/var/www/html/storage/logs
    depends_on:
      inbox-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - transbandung-microservices
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Reviews Service
  reviews-service:
    build:
      context: .
      dockerfile: dockerfiles/reviews-service.Dockerfile
    container_name: transbandung-reviews-service
    restart: unless-stopped
    ports:
      - "8005:80"
    environment:
      - SERVICE_NAME=reviews-service
      - SERVICE_PORT=8005
    env_file:
      - ./envs/.env.reviews-service
    volumes:
      - ./storage/logs/reviews-service:/var/www/html/storage/logs
    depends_on:
      reviews-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      ticketing-service:
        condition: service_healthy
    networks:
      - transbandung-microservices
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: dockerfiles/api-gateway.Dockerfile
    container_name: transbandung-api-gateway
    restart: unless-stopped
    ports:
      - "8000:80"
    environment:
      - SERVICE_NAME=api-gateway
      - SERVICE_PORT=8000
    env_file:
      - ./envs/.env.api-gateway
    volumes:
      - ./storage/logs/api-gateway:/var/www/html/storage/logs
    depends_on:
      user-service:
        condition: service_healthy
      ticketing-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      inbox-service:
        condition: service_healthy
      reviews-service:
        condition: service_healthy
    networks:
      - transbandung-microservices
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================================
  # LOAD BALANCER & MONITORING
  # ========================================

  # Nginx Load Balancer
  nginx-lb:
    image: nginx:alpine
    container_name: transbandung-nginx-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api-gateway
    networks:
      - transbandung-microservices
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # phpMyAdmin for database management
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: transbandung-phpmyadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      PMA_ARBITRARY: 1
      UPLOAD_LIMIT: 2G
    depends_on:
      - user-db
      - ticketing-db
      - payment-db
      - inbox-db
    networks:
      - transbandung-microservices
