"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Upload scalar for file uploads"
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

# =======================
# ENUMS
# =======================

"User role enumeration"
enum UserRole {
    ADMIN @enum(value: "admin")
    KONSUMEN @enum(value: "konsumen")
}

"Gender enumeration"  
enum Gender {
    LAKI_LAKI @enum(value: "laki-laki")
    PEREMPUAN @enum(value: "perempuan")
}

"Booking status enumeration"
enum BookingStatus {
    PENDING @enum(value: "pending")
    CONFIRMED @enum(value: "confirmed") 
    CANCELLED @enum(value: "cancelled")
    COMPLETED @enum(value: "completed")
}

"Payment status enumeration"
enum PaymentStatus {
    PENDING @enum(value: "pending")
    VERIFIED @enum(value: "verified")
    REJECTED @enum(value: "rejected")
    REFUNDED @enum(value: "refunded")
}

"Payment method enumeration"
enum PaymentMethodType {
    BANK_TRANSFER @enum(value: "bank_transfer")
    E_WALLET @enum(value: "e_wallet")
    CASH @enum(value: "cash")
}

"Message status enumeration"
enum MessageStatus {
    SENT @enum(value: "sent")
    READ @enum(value: "read")
    ARCHIVED @enum(value: "archived")
}

# =======================
# TYPES
# =======================

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "User role"
    role: UserRole!

    "Phone number"
    phone: String

    "Address"
    address: String

    "Birth date"
    birth_date: DateTime

    "Gender"
    gender: Gender

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    # Relationships
    "User profile information"
    profile: UserProfile @hasOne

    "User purchase history"
    purchaseHistories: [PurchaseHistory!]! @hasMany

    "User bookings"
    bookings: [Booking!]! @hasMany

    "User payments"
    payments: [Payment!]! @hasMany

    "User reviews"
    reviews: [Review!]! @hasMany

    "User complaints"
    complaints: [Complaint!]! @hasMany

    "Sent messages"
    sentMessages: [Message!]! @hasMany(relation: "sender")

    "Received messages"
    receivedMessages: [MessageRecipient!]! @hasMany
}

"User profile information"
type UserProfile {
    id: ID!
    user_id: ID!
    avatar: String
    bio: String
    preferences: String
    created_at: DateTime!
    updated_at: DateTime!

    # Relationships
    "Associated user"
    user: User! @belongsTo
}

"Purchase history record"
type PurchaseHistory {
    id: ID!
    user_id: ID!
    ticket_id: ID!
    amount: Float!
    status: String!
    purchase_date: DateTime!
    ticket_details: String
    created_at: DateTime!
    updated_at: DateTime!

    # Relationships
    "Associated user"
    user: User! @belongsTo

    "Associated ticket"
    ticket: Booking @belongsTo(relation: "ticket")
}

"Route information"
type Route {
    id: ID!
    route_name: String!
    origin: String!
    destination: String!
    stops: [String!]
    distance: Float!
    estimated_duration: Int!
    base_price: Float!
    is_active: Boolean!
    created_at: DateTime!
    updated_at: DateTime!

    # Relationships
    "Route schedules"
    schedules: [Schedule!]! @hasMany
}

"Bus schedule information"
type Schedule {
    id: ID!
    route_id: ID!
    departure_time: DateTime!
    arrival_time: DateTime!
    total_seats: Int!
    available_seats: Int!
    price: Float!
    is_active: Boolean!
    created_at: DateTime!
    updated_at: DateTime!

    # Relationships
    "Associated route"
    route: Route! @belongsTo

    "Schedule bookings"
    bookings: [Booking!]! @hasMany

    "Schedule seats"
    seats: [Seat!]! @hasMany
}

"Seat information"
type Seat {
    id: ID!
    schedule_id: ID!
    seat_number: String!
    travel_date: DateTime
    status: String!
    booking_id: ID
    is_available: Boolean!
    created_at: DateTime!
    updated_at: DateTime!

    # Relationships
    "Associated schedule"
    schedule: Schedule! @belongsTo

    "Associated booking"
    booking: Booking @belongsTo
}

"Booking information"
type Booking {
    id: ID!
    user_id: ID!
    schedule_id: ID!
    booking_code: String!
    travel_date: DateTime
    seat_count: Int!
    seat_numbers: [String!]!
    passenger_details: String
    total_amount: Float!
    status: BookingStatus!
    booking_date: DateTime!
    created_at: DateTime!
    updated_at: DateTime!

    # Relationships
    "Associated user"
    user: User! @belongsTo

    "Associated schedule"
    schedule: Schedule! @belongsTo

    "Booking payment"
    payment: Payment @hasOne

    "Purchase history"
    purchaseHistory: PurchaseHistory @hasOne
}

"Payment information"
type Payment {
    id: ID!
    payment_code: String!
    user_id: ID!
    booking_id: ID!
    payment_method: String!
    amount: Float!
    status: PaymentStatus!
    proof_image: String
    verified_by: ID
    verified_at: DateTime
    admin_notes: String
    created_at: DateTime!
    updated_at: DateTime!

    # Relationships
    "Associated user"
    user: User! @belongsTo

    "Associated booking"
    booking: Booking! @belongsTo

    "Admin who verified"
    verifiedBy: User @belongsTo(relation: "verifier")
}

"Payment method information"
type PaymentMethod {
    id: ID!
    name: String!
    type: PaymentMethodType!
    account_number: String
    account_name: String
    instructions: String
    is_active: Boolean!
    created_at: DateTime!
    updated_at: DateTime!

    # Relationships
    "Payments using this method"
    payments: [Payment!]! @hasMany
}

"Financial report"
type FinancialReport {
    id: ID!
    report_date: DateTime!
    total_revenue: Float!
    total_bookings: Int!
    total_refunds: Float!
    report_data: String
    created_at: DateTime!
    updated_at: DateTime!
}

"Review information"
type Review {
    id: ID!
    user_id: ID!
    booking_id: ID!
    rating: Int!
    comment: String
    created_at: DateTime!
    updated_at: DateTime!

    # Relationships
    "User who wrote review"
    user: User! @belongsTo

    "Associated booking"
    booking: Booking! @belongsTo
}

"Complaint information"
type Complaint {
    id: ID!
    user_id: ID!
    booking_id: ID
    subject: String!
    description: String!
    status: String!
    priority: String!
    created_at: DateTime!
    updated_at: DateTime!

    # Relationships
    "User who made complaint"
    user: User! @belongsTo

    "Associated booking"
    booking: Booking @belongsTo

    "Admin responses"
    adminResponses: [AdminResponse!]! @hasMany
}

"Admin response to complaint"
type AdminResponse {
    id: ID!
    complaint_id: ID!
    admin_id: ID!
    response: String!
    created_at: DateTime!
    updated_at: DateTime!

    # Relationships
    "Associated complaint"
    complaint: Complaint! @belongsTo

    "Admin who responded"
    admin: User! @belongsTo
}

"Message information"
type Message {
    id: ID!
    sender_id: ID!
    subject: String!
    body: String!
    status: MessageStatus!
    created_at: DateTime!
    updated_at: DateTime!

    # Relationships
    "Message sender"
    sender: User! @belongsTo

    "Message recipients"
    recipients: [MessageRecipient!]! @hasMany
}

"Message recipient information"
type MessageRecipient {
    id: ID!
    message_id: ID!
    recipient_id: ID!
    is_read: Boolean!
    read_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!

    # Relationships
    "Associated message"
    message: Message! @belongsTo

    "Message recipient"
    recipient: User! @belongsTo
}

"Notification information"
type Notification {
    id: ID!
    user_id: ID!
    title: String!
    message: String!
    type: String!
    is_read: Boolean!
    read_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!

    # Relationships
    "Associated user"
    user: User! @belongsTo
}

# =======================
# INPUT TYPES
# =======================

"Input for creating user"
input CreateUserInput {
    name: String! @rules(apply: ["required", "string", "max:255"])
    email: String! @rules(apply: ["required", "email", "unique:users,email"])
    password: String! @rules(apply: ["required", "min:8"])
    role: UserRole!
    phone: String @rules(apply: ["string", "max:20"])
    address: String @rules(apply: ["string"])
    birth_date: DateTime
    gender: Gender
}

"Input for updating user"
input UpdateUserInput {
    name: String @rules(apply: ["string", "max:255"])
    phone: String @rules(apply: ["string", "max:20"])
    address: String @rules(apply: ["string"])
    birth_date: DateTime
    gender: Gender
}

"Input for creating booking"
input CreateBookingInput {
    schedule_id: ID! @rules(apply: ["required", "exists:schedules,id"])
    seat_id: ID! @rules(apply: ["required", "exists:seats,id"])
    travel_date: DateTime
    passenger_name: String! @rules(apply: ["required", "string", "max:255"])
    passenger_phone: String! @rules(apply: ["required", "string", "max:20"])
}

"Input for creating payment"
input CreatePaymentInput {
    booking_id: ID! @rules(apply: ["required", "exists:bookings,id"])
    payment_method_id: ID! @rules(apply: ["required", "exists:payment_methods,id"])
    payment_proof: Upload
}

"Input for creating review"
input CreateReviewInput {
    booking_id: ID! @rules(apply: ["required", "exists:bookings,id"])
    rating: Int! @rules(apply: ["required", "integer", "min:1", "max:5"])
    comment: String @rules(apply: ["string"])
}

"Input for creating complaint"
input CreateComplaintInput {
    booking_id: ID @rules(apply: ["exists:bookings,id"])
    subject: String! @rules(apply: ["required", "string", "max:255"])
    description: String! @rules(apply: ["required", "string"])
}

"Input for creating message"
input CreateMessageInput {
    recipient_ids: [ID!]! @rules(apply: ["required", "array"])
    subject: String! @rules(apply: ["required", "string", "max:255"])
    body: String! @rules(apply: ["required", "string"])
}

# =======================
# QUERIES
# =======================

"Indicates what fields are available at the top level of a query operation."
type Query {
    # Authentication
    "Get current authenticated user"
    me: User @auth

    # User Management Service
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
      "Filter by role"
      role: UserRole @eq
    ): [User!]! @paginate(defaultCount: 10) @guard

    # Ticketing Service
    "Get all routes"
    routes(
      "Filter by active status"
      is_active: Boolean @eq
    ): [Route!]! @paginate(defaultCount: 10)

    "Find single route"
    route(id: ID! @eq): Route @find

    "Get schedules for a route"
    schedules(
      route_id: ID @eq
      "Filter by active status"
      is_active: Boolean @eq
      "Filter by departure date"
      departure_date: DateTime @where(operator: ">=", key: "departure_time")
    ): [Schedule!]! @paginate(defaultCount: 10)

    "Find single schedule"
    schedule(id: ID! @eq): Schedule @find

    "Get available seats for a schedule"
    seats(
      schedule_id: ID! @eq
      "Filter by availability"
      is_available: Boolean @eq
    ): [Seat!]! @all

    "Get user bookings"
    bookings(
      user_id: ID @eq
      status: BookingStatus @eq
    ): [Booking!]! @paginate(defaultCount: 10) @guard

    "Find single booking"
    booking(
      id: ID @eq
      booking_code: String @eq
    ): Booking @find @guard

    # Payment Service
    "Get payment methods"
    paymentMethods(
      is_active: Boolean @eq
    ): [PaymentMethod!]! @all

    "Get user payments"
    payments(
      user_id: ID @eq
      status: PaymentStatus @eq
    ): [Payment!]! @paginate(defaultCount: 10) @guard

    "Find single payment"
    payment(id: ID! @eq): Payment @find

    "Get financial reports"
    financialReports: [FinancialReport!]! @paginate(defaultCount: 10) @guard(with: ["admin"])

    # Review Rating Service
    "Get reviews for a route or booking"
    reviews(
      booking_id: ID @eq
    ): [Review!]! @paginate(defaultCount: 10)

    "Get user complaints"
    complaints(
      user_id: ID @eq
      status: String @eq
    ): [Complaint!]! @paginate(defaultCount: 10) @guard

    "Find single complaint"
    complaint(id: ID! @eq): Complaint @find @guard

    # Inbox Service
    "Get user messages"
    messages(
      recipient_id: ID @eq
      status: MessageStatus @eq
    ): [Message!]! @paginate(defaultCount: 10) @guard

    "Find single message"
    message(id: ID! @eq): Message @find

    "Get user notifications"
    notifications(
      user_id: ID @eq
      is_read: Boolean @eq
    ): [Notification!]! @paginate(defaultCount: 10) @guard
}

# =======================
# MUTATIONS
# =======================

type Mutation {
    # Authentication
    "Login user"
    login(
        email: String! @rules(apply: ["required", "email"])
        password: String! @rules(apply: ["required"])
    ): User @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@login")

    "Register new user"
    register(input: CreateUserInput! @spread): User @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@register")

    "Logout user"
    logout: String @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@logout") @guard

    # User Management
    "Update user information"
    updateUser(
        id: ID! @rules(apply: ["required"])
        input: UpdateUserInput! @spread
    ): User @update @guard

    "Delete user"
    deleteUser(id: ID! @rules(apply: ["required"])): User @delete @guard(with: ["admin"])

    # Ticketing Service
    "Create new booking"
    createBooking(input: CreateBookingInput! @spread): Booking @field(resolver: "App\\GraphQL\\Mutations\\BookingMutation@create") @guard

    "Cancel booking"
    cancelBooking(id: ID! @rules(apply: ["required"])): Booking @field(resolver: "App\\GraphQL\\Mutations\\BookingMutation@cancel") @guard

    # Payment Service
    "Create payment"
    createPayment(input: CreatePaymentInput! @spread): Payment @field(resolver: "App\\GraphQL\\Mutations\\PaymentMutation@create") @guard

    "Verify payment (admin only)"
    verifyPayment(
        id: ID! @rules(apply: ["required"])
        status: PaymentStatus!
        notes: String
    ): Payment @field(resolver: "App\\GraphQL\\Mutations\\PaymentMutation@verify") @guard(with: ["admin"])

    # Review Rating Service
    "Create review"
    createReview(input: CreateReviewInput! @spread): Review @create @guard

    "Update review"
    updateReview(
        id: ID! @rules(apply: ["required"])
        rating: Int @rules(apply: ["integer", "min:1", "max:5"])
        comment: String
    ): Review @update @guard

    "Delete review"
    deleteReview(id: ID! @rules(apply: ["required"])): Review @delete @guard

    "Create complaint"
    createComplaint(input: CreateComplaintInput! @spread): Complaint @create @guard

    "Respond to complaint (admin only)"
    respondToComplaint(
        complaint_id: ID! @rules(apply: ["required"])
        response: String! @rules(apply: ["required"])
    ): AdminResponse @field(resolver: "App\\GraphQL\\Mutations\\ComplaintMutation@respond") @guard(with: ["admin"])

    # Inbox Service
    "Create message"
    createMessage(input: CreateMessageInput! @spread): Message @field(resolver: "App\\GraphQL\\Mutations\\MessageMutation@create") @guard

    "Mark message as read"
    markMessageAsRead(message_id: ID! @rules(apply: ["required"])): MessageRecipient @field(resolver: "App\\GraphQL\\Mutations\\MessageMutation@markAsRead") @guard

    "Mark notification as read"
    markNotificationAsRead(id: ID! @rules(apply: ["required"])): Notification @field(resolver: "App\\GraphQL\\Mutations\\NotificationMutation@markAsRead") @guard
}
